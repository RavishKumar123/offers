import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import { fetchOffers } from "../services/offerService";
import { SingleOffer } from "../models/Offer";
export interface OffersState {
  loading: boolean;
  offers: SingleOffer[];
  message: string | undefined;
}

const initialState: OffersState = {
  loading: false,
  offers: [],
  message: undefined,
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(getOffers(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const getOffers = createAsyncThunk("offer/fetchOffers", async () => {
  const response = await fetchOffers();
  // The value we return becomes the `fulfilled` action payload
  return response;
});

export const offerSlice = createSlice({
  name: "offer",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {},
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(getOffers.pending, (state) => {
        state.loading = true;
      })
      .addCase(getOffers.fulfilled, (state, action) => {
        state.loading = false;
        state.offers = action.payload;
      })
      .addCase(getOffers.rejected, (state, error) => {
        state.message = error.error.message;
        state.loading = false;
      });
  },
});

export default offerSlice.reducer;
